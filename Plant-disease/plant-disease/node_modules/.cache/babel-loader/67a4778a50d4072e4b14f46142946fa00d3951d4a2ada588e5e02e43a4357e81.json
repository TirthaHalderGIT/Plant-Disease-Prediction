{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vanshika Kothari\\\\Plant-disease\\\\plant-disease\\\\src\\\\pages\\\\Info.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Container, Typography, Box, Card, CardContent, Grid } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Info = () => {\n  _s();\n  const [diseaseInfo, setDiseaseInfo] = useState(null);\n  const {\n    prediction\n  } = useParams();\n  const extractSections = text => {\n    let cleanText = text.replace(/\\*\\s*/g, \"\").trim();\n    const regex = /(What it is:|Causes:|Symptoms:|Effects:|Treatment Plan:|Prevention Methods:)[\\s\\S]*?(?=(What it is:|Causes:|Symptoms:|Effects:|Treatment Plan:|Prevention Methods:|$))/g;\n    const matches = [...cleanText.matchAll(regex)];\n    //console.log(\"Matches Found:\", matches);\n    const sectionData = {};\n    matches.forEach(match => {\n      const key = match[1].replace(\":\", \"\").trim();\n      sectionData[key] = match[0].replace(match[1], \"\").trim();\n    });\n    console.log(\"Extracted Sections:\", sectionData);\n    return sectionData;\n  };\n  useEffect(() => {\n    const text = `*What it is:* A fast-spreading and highly destructive disease affecting tomato (and potato) plants.\n*Causes:* Caused by the water mold Phytophthora infestans. It thrives in cool, wet, and humid weather. Spores spread by wind and rain splash.\n*Symptoms:*\n  * *Leaves:* Dark, water-soaked spots, often appearing greasy, sometimes with white fuzzy mold on the underside in humid conditions.\n  * *Stems:* Dark, elongated lesions.\n  * *Fruit:* Greasy-looking, firm, brown blotches that can rapidly enlarge and rot.\n*Effects on the plant:* Rapidly kills leaves, stems, and fruit. Can quickly destroy entire plants and spread through a crop, leading to total loss. Makes fruit inedible.\n*Treatment Plan:*\n  * Difficult once established. Act immediately.\n  * Remove and destroy (do not compost) infected plant parts or whole plants if severely affected.\n  * Apply fungicides (copper-based or specific synthetic fungicides labelled for late blight) preventatively or at the very first sign, following label instructions. Repeat applications are usually necessary.\n*Prevention Methods:*\n  * Plant disease-resistant varieties.\n  * Ensure good air circulation (space plants well, prune lower leaves).\n  * Water at the base of plants (avoid overhead watering).\n  * Mulch around plants.\n  * Rotate crops (avoid planting tomatoes/potatoes in the same spot for 3-4 years).\n  * Monitor weather; be vigilant during cool, wet periods.\n  * Inspect plants frequently, especially after wet weather.\n  * Control volunteer tomato/potato plants and related weeds.\n  * Remove and destroy all plant debris at the end of the season.\n`;\n\n    //if (!prediction) return;  // Prevents fetching if prediction is undefined\n    const extract = extractSections(text);\n    setDiseaseInfo(extract);\n    // fetch(`http://127.0.0.1:5000/diseaseinfo?prediction=${prediction}`)\n    //   .then(response => {\n    //     if (!response.ok) {\n    //       throw new Error(\"Failed to fetch disease details\");\n    //     }\n    //     return response.json();\n    //   })\n    //   .then(data => {\n    //     const extracted=extractSections(data.info)\n    //     setDiseaseInfo(extracted);\n    //   })\n    //   .catch(error => {\n    //     console.error(\"Error fetching disease details:\", error);\n    //   });\n  }, []);\n  if (!diseaseInfo) {\n    return /*#__PURE__*/_jsxDEV(Typography, {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    style: {\n      marginTop: \"4px\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"flex-start\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: Object.entries(diseaseInfo).map(([title, content], index) => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            backgroundColor: \"#E8F5E9\",\n            // Light green background\n            boxShadow: \"0px 4px 12px rgba(0, 100, 0, 0.2)\",\n            // Greenish shadow effect\n            borderRadius: 3,\n            // Rounded corners\n            textAlign: \"left\"\n          },\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            style: {\n              padding: 3\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              sx: {\n                fontWeight: \"bold\",\n                fontFamily: \"'Poppins', sans-serif\",\n                color: \"#1B5E20\"\n              },\n              children: title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              sx: {\n                fontSize: \"15px\",\n                fontFamily: \"'Poppins', sans-serif\",\n                lineHeight: 1.6\n              },\n              children: content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 4\n  }, this);\n};\n_s(Info, \"1DCWEF+2HsgtC+v7kBuKB5tbQMc=\", false, function () {\n  return [useParams];\n});\n_c = Info;\nexport default Info;\nvar _c;\n$RefreshReg$(_c, \"Info\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Container","Typography","Box","Card","CardContent","Grid","jsxDEV","_jsxDEV","Info","_s","diseaseInfo","setDiseaseInfo","prediction","extractSections","text","cleanText","replace","trim","regex","matches","matchAll","sectionData","forEach","match","key","console","log","extract","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginTop","display","flexDirection","alignItems","container","spacing","Object","entries","map","title","content","index","item","xs","sm","backgroundColor","boxShadow","borderRadius","textAlign","padding","variant","sx","fontWeight","fontFamily","color","fontSize","lineHeight","_c","$RefreshReg$"],"sources":["C:/Users/Vanshika Kothari/Plant-disease/plant-disease/src/pages/Info.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Container, Typography ,Box,Card,CardContent,Grid} from \"@material-ui/core\";\r\n\r\nconst Info = () => {\r\n  const [diseaseInfo, setDiseaseInfo] = useState(null);\r\n  const { prediction } = useParams();\r\n \r\n  const extractSections = (text) => {\r\n    let cleanText = text.replace(/\\*\\s*/g, \"\").trim();\r\n    const regex = /(What it is:|Causes:|Symptoms:|Effects:|Treatment Plan:|Prevention Methods:)[\\s\\S]*?(?=(What it is:|Causes:|Symptoms:|Effects:|Treatment Plan:|Prevention Methods:|$))/g;\r\n    const matches = [...cleanText.matchAll(regex)];\r\n    //console.log(\"Matches Found:\", matches);\r\n    const sectionData = {};\r\n    matches.forEach((match) => {\r\n      const key = match[1].replace(\":\", \"\").trim();\r\n      sectionData[key] = match[0].replace(match[1], \"\").trim();\r\n    });\r\n    console.log(\"Extracted Sections:\", sectionData); \r\n    return sectionData;\r\n  };\r\n  useEffect(() => {\r\n    const text = `*What it is:* A fast-spreading and highly destructive disease affecting tomato (and potato) plants.\r\n*Causes:* Caused by the water mold Phytophthora infestans. It thrives in cool, wet, and humid weather. Spores spread by wind and rain splash.\r\n*Symptoms:*\r\n  * *Leaves:* Dark, water-soaked spots, often appearing greasy, sometimes with white fuzzy mold on the underside in humid conditions.\r\n  * *Stems:* Dark, elongated lesions.\r\n  * *Fruit:* Greasy-looking, firm, brown blotches that can rapidly enlarge and rot.\r\n*Effects on the plant:* Rapidly kills leaves, stems, and fruit. Can quickly destroy entire plants and spread through a crop, leading to total loss. Makes fruit inedible.\r\n*Treatment Plan:*\r\n  * Difficult once established. Act immediately.\r\n  * Remove and destroy (do not compost) infected plant parts or whole plants if severely affected.\r\n  * Apply fungicides (copper-based or specific synthetic fungicides labelled for late blight) preventatively or at the very first sign, following label instructions. Repeat applications are usually necessary.\r\n*Prevention Methods:*\r\n  * Plant disease-resistant varieties.\r\n  * Ensure good air circulation (space plants well, prune lower leaves).\r\n  * Water at the base of plants (avoid overhead watering).\r\n  * Mulch around plants.\r\n  * Rotate crops (avoid planting tomatoes/potatoes in the same spot for 3-4 years).\r\n  * Monitor weather; be vigilant during cool, wet periods.\r\n  * Inspect plants frequently, especially after wet weather.\r\n  * Control volunteer tomato/potato plants and related weeds.\r\n  * Remove and destroy all plant debris at the end of the season.\r\n`\r\n   \r\n    //if (!prediction) return;  // Prevents fetching if prediction is undefined\r\n    const extract=extractSections(text)\r\n    setDiseaseInfo(extract)\r\n    // fetch(`http://127.0.0.1:5000/diseaseinfo?prediction=${prediction}`)\r\n    //   .then(response => {\r\n    //     if (!response.ok) {\r\n    //       throw new Error(\"Failed to fetch disease details\");\r\n    //     }\r\n    //     return response.json();\r\n    //   })\r\n    //   .then(data => {\r\n    //     const extracted=extractSections(data.info)\r\n    //     setDiseaseInfo(extracted);\r\n    //   })\r\n    //   .catch(error => {\r\n    //     console.error(\"Error fetching disease details:\", error);\r\n    //   });\r\n  }, []); \r\n\r\n  if (!diseaseInfo) {\r\n    return <Typography>Loading...</Typography>;\r\n  }\r\n\r\n  return (\r\n   <Box style={{marginTop:\"4px\",display: \"flex\", flexDirection: \"column\", alignItems: \"flex-start\" }}>\r\n     <Grid container spacing={3}>\r\n        {Object.entries(diseaseInfo).map(([title, content], index) => (\r\n          <Grid item xs={12} sm={6} key={index}> \r\n            <Card\r\n              style={{\r\n                backgroundColor: \"#E8F5E9\", // Light green background\r\n                boxShadow: \"0px 4px 12px rgba(0, 100, 0, 0.2)\", // Greenish shadow effect\r\n                borderRadius: 3, // Rounded corners\r\n                textAlign: \"left\"\r\n              }}\r\n            >\r\n              <CardContent style={{ padding: 3 }}>\r\n                <Typography variant=\"h6\" sx={{ fontWeight: \"bold\", fontFamily: \"'Poppins', sans-serif\", color: \"#1B5E20\" }}>\r\n                  {title}\r\n                </Typography>\r\n                <Typography variant=\"body1\" sx={{ fontSize: \"15px\", fontFamily: \"'Poppins', sans-serif\", lineHeight: 1.6 }}>\r\n                  {content}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n   </Box>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}