{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vanshika Kothari\\\\Plant-disease\\\\plant-disease\\\\src\\\\pages\\\\Info.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Container, Typography } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Info = () => {\n  _s();\n  const [diseaseInfo, setDiseaseInfo] = useState(null);\n  const {\n    prediction\n  } = useParams();\n  const extractSections = text => {\n    const regex = /(What it is:|Causes:|Symptoms:|Effects:|Treatment Plan:|Prevention Methods:)[\\s\\S]*?(?=(What it is:|Causes:|Symptoms:|Effects:|Treatment Plan:|Prevention Methods:|$))/g;\n    const matches = [...text.matchAll(regex)];\n    const sectionData = {};\n    matches.forEach(match => {\n      const key = match[1].replace(\":\", \"\").trim();\n      sectionData[key] = match[0].replace(match[1], \"\").trim();\n    });\n    return sectionData;\n  };\n  useEffect(() => {\n    const text = `\n    *What it is:* A fast-spreading and highly destructive disease affecting tomato (and potato) plants.\n    *Causes:* Caused by the water mold Phytophthora infestans. It thrives in cool, wet, and humid weather. Spores spread by wind and rain splash.\n    *Symptoms:*\n      * *Leaves:* Dark, water-soaked spots, often appearing greasy, sometimes with white fuzzy mold on the underside in humid conditions.\n      * *Stems:* Dark, elongated lesions.\n      * *Fruit:* Greasy-looking, firm, brown blotches that can rapidly enlarge and rot.\n    *Effects on the plant:* Rapidly kills leaves, stems, and fruit. Can quickly destroy entire plants and spread through a crop, leading to total loss. Makes fruit inedible.\n    *Treatment Plan:*\n      * Difficult once established. Act immediately.\n      * Remove and destroy (do not compost) infected plant parts or whole plants if severely affected.\n      * Apply fungicides (copper-based or specific synthetic fungicides labelled for late blight) preventatively or at the very first sign, following label instructions. Repeat applications are usually necessary.\n    *Prevention Methods:*\n      * Plant disease-resistant varieties.\n      * Ensure good air circulation (space plants well, prune lower leaves).\n      * Water at the base of plants (avoid overhead watering).\n      * Mulch around plants.\n      * Rotate crops (avoid planting tomatoes/potatoes in the same spot for 3-4 years).\n      * Monitor weather; be vigilant during cool, wet periods.\n      * Inspect plants frequently, especially after wet weather.\n      * Control volunteer tomato/potato plants and related weeds.\n      * Remove and destroy all plant debris at the end of the season.\n    `;\n    text = text.replace(/\\*\\s*/g, \"\").trim();\n    if (!prediction) return; // Prevents fetching if prediction is undefined\n    const extract = extractSections(text);\n    setDiseaseInfo(extract);\n    // fetch(`http://127.0.0.1:5000/diseaseinfo?prediction=${prediction}`)\n    //   .then(response => {\n    //     if (!response.ok) {\n    //       throw new Error(\"Failed to fetch disease details\");\n    //     }\n    //     return response.json();\n    //   })\n    //   .then(data => {\n    //     const extracted=extractSections(data.info)\n    //     setDiseaseInfo(extracted);\n    //   })\n    //   .catch(error => {\n    //     console.error(\"Error fetching disease details:\", error);\n    //   });\n  }, []);\n  if (!diseaseInfo) {\n    return /*#__PURE__*/_jsxDEV(Typography, {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    style: {\n      marginTop: \"4px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h3\",\n      align: \"center\",\n      children: \"\\uD83C\\uDF31 Plant Disease Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }, this), Object.entries(diseaseInfo).map(([title, content], index) => {\n      /*#__PURE__*/_jsxDEV(Box, {\n        style: {\n          marginBottom: \"3px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          style: {\n            fontWeight: \"bold\",\n            fontFamily: \"'Poppins', sans-serif\"\n          },\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          style: {\n            fontSize: \"20px\",\n            fontFamily: \"'Poppins', sans-serif\"\n          },\n          children: content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 7\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }, this);\n    }), \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 4\n  }, this);\n};\n_s(Info, \"1DCWEF+2HsgtC+v7kBuKB5tbQMc=\", false, function () {\n  return [useParams];\n});\n_c = Info;\nexport default Info;\nvar _c;\n$RefreshReg$(_c, \"Info\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Container","Typography","jsxDEV","_jsxDEV","Info","_s","diseaseInfo","setDiseaseInfo","prediction","extractSections","text","regex","matches","matchAll","sectionData","forEach","match","key","replace","trim","extract","children","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","style","marginTop","variant","align","Object","entries","map","title","content","index","Box","marginBottom","fontWeight","fontFamily","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/Vanshika Kothari/Plant-disease/plant-disease/src/pages/Info.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Container, Typography } from \"@material-ui/core\";\r\n\r\nconst Info = () => {\r\n  const [diseaseInfo, setDiseaseInfo] = useState(null);\r\n  const { prediction } = useParams();\r\n  const extractSections = (text) => {\r\n    const regex = /(What it is:|Causes:|Symptoms:|Effects:|Treatment Plan:|Prevention Methods:)[\\s\\S]*?(?=(What it is:|Causes:|Symptoms:|Effects:|Treatment Plan:|Prevention Methods:|$))/g;\r\n    const matches = [...text.matchAll(regex)];\r\n\r\n    const sectionData = {};\r\n    matches.forEach((match) => {\r\n      const key = match[1].replace(\":\", \"\").trim();\r\n      sectionData[key] = match[0].replace(match[1], \"\").trim();\r\n    });\r\n\r\n    return sectionData;\r\n  };\r\n  useEffect(() => {\r\n    const text = `\r\n    *What it is:* A fast-spreading and highly destructive disease affecting tomato (and potato) plants.\r\n    *Causes:* Caused by the water mold Phytophthora infestans. It thrives in cool, wet, and humid weather. Spores spread by wind and rain splash.\r\n    *Symptoms:*\r\n      * *Leaves:* Dark, water-soaked spots, often appearing greasy, sometimes with white fuzzy mold on the underside in humid conditions.\r\n      * *Stems:* Dark, elongated lesions.\r\n      * *Fruit:* Greasy-looking, firm, brown blotches that can rapidly enlarge and rot.\r\n    *Effects on the plant:* Rapidly kills leaves, stems, and fruit. Can quickly destroy entire plants and spread through a crop, leading to total loss. Makes fruit inedible.\r\n    *Treatment Plan:*\r\n      * Difficult once established. Act immediately.\r\n      * Remove and destroy (do not compost) infected plant parts or whole plants if severely affected.\r\n      * Apply fungicides (copper-based or specific synthetic fungicides labelled for late blight) preventatively or at the very first sign, following label instructions. Repeat applications are usually necessary.\r\n    *Prevention Methods:*\r\n      * Plant disease-resistant varieties.\r\n      * Ensure good air circulation (space plants well, prune lower leaves).\r\n      * Water at the base of plants (avoid overhead watering).\r\n      * Mulch around plants.\r\n      * Rotate crops (avoid planting tomatoes/potatoes in the same spot for 3-4 years).\r\n      * Monitor weather; be vigilant during cool, wet periods.\r\n      * Inspect plants frequently, especially after wet weather.\r\n      * Control volunteer tomato/potato plants and related weeds.\r\n      * Remove and destroy all plant debris at the end of the season.\r\n    `;\r\n    text = text.replace(/\\*\\s*/g, \"\").trim();\r\n    if (!prediction) return;  // Prevents fetching if prediction is undefined\r\n    const extract=extractSections(text)\r\n    setDiseaseInfo(extract)\r\n    // fetch(`http://127.0.0.1:5000/diseaseinfo?prediction=${prediction}`)\r\n    //   .then(response => {\r\n    //     if (!response.ok) {\r\n    //       throw new Error(\"Failed to fetch disease details\");\r\n    //     }\r\n    //     return response.json();\r\n    //   })\r\n    //   .then(data => {\r\n    //     const extracted=extractSections(data.info)\r\n    //     setDiseaseInfo(extracted);\r\n    //   })\r\n    //   .catch(error => {\r\n    //     console.error(\"Error fetching disease details:\", error);\r\n    //   });\r\n  }, []); \r\n\r\n  if (!diseaseInfo) {\r\n    return <Typography>Loading...</Typography>;\r\n  }\r\n\r\n  return (\r\n   <Container maxWidth=\"md\" style={{marginTop:\"4px\"}}>\r\n    <Typography variant=\"h3\" align=\"center\">ðŸŒ± Plant Disease Information</Typography>\r\n    {Object.entries(diseaseInfo).map(([title,content],index)=>{\r\n    <Box key={index} style={{marginBottom:\"3px\"}}>\r\n      <Typography variant=\"h5\" style={{fontWeight:\"bold\", fontFamily:\"'Poppins', sans-serif\"}}>{title}</Typography>\r\n      <Typography variant=\"body1\" style={{fontSize:\"20px\",fontFamily:\"'Poppins', sans-serif\"}}>{content}</Typography>\r\n    </Box>\r\n    })};\r\n   </Container>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}