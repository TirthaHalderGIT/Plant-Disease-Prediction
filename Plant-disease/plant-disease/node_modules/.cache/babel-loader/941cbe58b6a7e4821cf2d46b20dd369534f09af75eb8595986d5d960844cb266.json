{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vanshika Kothari\\\\Plant-disease\\\\plant-disease\\\\src\\\\pages\\\\Info.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Typography } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Info = () => {\n  _s();\n  const [diseaseInfo, setDiseaseInfo] = useState(null);\n  const {\n    prediction\n  } = useParams();\n  useEffect(() => {\n    if (!prediction) return; // Prevents fetching if prediction is undefined\n\n    fetch(`http://127.0.0.1:5000/diseaseinfo?prediction=${prediction}`).then(response => {\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch disease details\");\n      }\n      return response.json();\n    }).then(data => {\n      console.log(\"Fetched data:\", data); // ✅ Debugging step\n      setDiseaseInfo(data.info);\n    }).catch(error => {\n      console.error(\"Error fetching disease details:\", error);\n    });\n  }, [prediction]); // ✅ Runs only when `prediction` changes\n\n  if (!diseaseInfo) {\n    return /*#__PURE__*/_jsxDEV(Typography, {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: diseaseInfo.Title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      children: diseaseInfo.Summary\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), diseaseInfo.Symptoms && /*#__PURE__*/_jsxDEV(Typography, {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Symptoms:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 44\n      }, this), \" \", diseaseInfo.Symptoms]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 32\n    }, this), diseaseInfo.Treatment && /*#__PURE__*/_jsxDEV(Typography, {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Treatment:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 45\n      }, this), \" \", diseaseInfo.Treatment]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 33\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: diseaseInfo.URL,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Read more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(Info, \"1DCWEF+2HsgtC+v7kBuKB5tbQMc=\", false, function () {\n  return [useParams];\n});\n_c = Info;\nexport default Info;\nvar _c;\n$RefreshReg$(_c, \"Info\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Typography","jsxDEV","_jsxDEV","Info","_s","diseaseInfo","setDiseaseInfo","prediction","fetch","then","response","ok","Error","json","data","console","log","info","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","Title","Summary","Symptoms","Treatment","href","URL","target","rel","_c","$RefreshReg$"],"sources":["C:/Users/Vanshika Kothari/Plant-disease/plant-disease/src/pages/Info.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nconst Info = () => {\r\n  const [diseaseInfo, setDiseaseInfo] = useState(null);\r\n  const { prediction } = useParams();\r\n\r\n  useEffect(() => {\r\n    if (!prediction) return;  // Prevents fetching if prediction is undefined\r\n\r\n    fetch(`http://127.0.0.1:5000/diseaseinfo?prediction=${prediction}`)\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch disease details\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        console.log(\"Fetched data:\", data); // ✅ Debugging step\r\n        setDiseaseInfo(data.info);\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error fetching disease details:\", error);\r\n      });\r\n  }, [prediction]); // ✅ Runs only when `prediction` changes\r\n\r\n  if (!diseaseInfo) {\r\n    return <Typography>Loading...</Typography>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Typography variant=\"h4\">{diseaseInfo.Title}</Typography>\r\n      <Typography variant=\"body1\">{diseaseInfo.Summary}</Typography>\r\n      {diseaseInfo.Symptoms && <Typography><b>Symptoms:</b> {diseaseInfo.Symptoms}</Typography>}\r\n      {diseaseInfo.Treatment && <Typography><b>Treatment:</b> {diseaseInfo.Treatment}</Typography>}\r\n      <Typography>\r\n        <a href={diseaseInfo.URL} target=\"_blank\" rel=\"noopener noreferrer\">Read more</a>\r\n      </Typography>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}