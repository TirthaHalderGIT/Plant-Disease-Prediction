{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vanshika Kothari\\\\Plant-disease\\\\plant-disease\\\\src\\\\pages\\\\Info.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Container, Typography, Box, Card, CardContent } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Info = () => {\n  _s();\n  const [diseaseInfo, setDiseaseInfo] = useState(null);\n  const {\n    prediction\n  } = useParams();\n  const extractSections = text => {\n    let cleanText = text.replace(/\\*\\s*/g, \"\").trim();\n    const regex = /(What it is:|Causes:|Symptoms:|Effects:|Treatment Plan:|Prevention Methods:)[\\s\\S]*?(?=(What it is:|Causes:|Symptoms:|Effects:|Treatment Plan:|Prevention Methods:|$))/g;\n    const matches = [...cleanText.matchAll(regex)];\n    //console.log(\"Matches Found:\", matches);\n    const sectionData = {};\n    matches.forEach(match => {\n      const key = match[1].replace(\":\", \"\").trim();\n      sectionData[key] = match[0].replace(match[1], \"\").trim();\n    });\n    console.log(\"Extracted Sections:\", sectionData);\n    return sectionData;\n  };\n  useEffect(() => {\n    const text = `*What it is:* A fast-spreading and highly destructive disease affecting tomato (and potato) plants.\n*Causes:* Caused by the water mold Phytophthora infestans. It thrives in cool, wet, and humid weather. Spores spread by wind and rain splash.\n*Symptoms:*\n  * *Leaves:* Dark, water-soaked spots, often appearing greasy, sometimes with white fuzzy mold on the underside in humid conditions.\n  * *Stems:* Dark, elongated lesions.\n  * *Fruit:* Greasy-looking, firm, brown blotches that can rapidly enlarge and rot.\n*Effects on the plant:* Rapidly kills leaves, stems, and fruit. Can quickly destroy entire plants and spread through a crop, leading to total loss. Makes fruit inedible.\n*Treatment Plan:*\n  * Difficult once established. Act immediately.\n  * Remove and destroy (do not compost) infected plant parts or whole plants if severely affected.\n  * Apply fungicides (copper-based or specific synthetic fungicides labelled for late blight) preventatively or at the very first sign, following label instructions. Repeat applications are usually necessary.\n*Prevention Methods:*\n  * Plant disease-resistant varieties.\n  * Ensure good air circulation (space plants well, prune lower leaves).\n  * Water at the base of plants (avoid overhead watering).\n  * Mulch around plants.\n  * Rotate crops (avoid planting tomatoes/potatoes in the same spot for 3-4 years).\n  * Monitor weather; be vigilant during cool, wet periods.\n  * Inspect plants frequently, especially after wet weather.\n  * Control volunteer tomato/potato plants and related weeds.\n  * Remove and destroy all plant debris at the end of the season.\n`;\n\n    //if (!prediction) return;  // Prevents fetching if prediction is undefined\n    const extract = extractSections(text);\n    setDiseaseInfo(extract);\n    // fetch(`http://127.0.0.1:5000/diseaseinfo?prediction=${prediction}`)\n    //   .then(response => {\n    //     if (!response.ok) {\n    //       throw new Error(\"Failed to fetch disease details\");\n    //     }\n    //     return response.json();\n    //   })\n    //   .then(data => {\n    //     const extracted=extractSections(data.info)\n    //     setDiseaseInfo(extracted);\n    //   })\n    //   .catch(error => {\n    //     console.error(\"Error fetching disease details:\", error);\n    //   });\n  }, []);\n  if (!diseaseInfo) {\n    return /*#__PURE__*/_jsxDEV(Typography, {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    style: {\n      marginTop: \"4px\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"flex-start\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      align: \"center\",\n      style: {\n        fontFamily: \"'Poppins', sans-serif\",\n        fontWeight: 'bold',\n        color: \"#2E7D32\",\n        marginBottom: \"30px\"\n      },\n      children: \"\\uD83C\\uDF31 Plant Disease Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }, this), Object.entries(diseaseInfo).map(([title, content], index) => /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        backgroundColor: \"#E8F5E9\",\n        // Light green background\n        boxShadow: \"0px 4px 12px rgba(0, 100, 0, 0.2)\",\n        // Greenish shadow effect\n        borderRadius: 3,\n        // Rounded corners\n        marginBottom: 3 // Spacing between cards\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        style: {\n          padding: 3,\n          textAlign: \"left\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            fontWeight: \"bold\",\n            fontFamily: \"'Poppins', sans-serif\",\n            color: \"#1B5E20\"\n          },\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          sx: {\n            fontSize: \"15px\",\n            fontFamily: \"'Poppins', sans-serif\",\n            lineHeight: 1.6\n          },\n          children: content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, this)), \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 4\n  }, this);\n};\n_s(Info, \"1DCWEF+2HsgtC+v7kBuKB5tbQMc=\", false, function () {\n  return [useParams];\n});\n_c = Info;\nexport default Info;\nvar _c;\n$RefreshReg$(_c, \"Info\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Container","Typography","Box","Card","CardContent","jsxDEV","_jsxDEV","Info","_s","diseaseInfo","setDiseaseInfo","prediction","extractSections","text","cleanText","replace","trim","regex","matches","matchAll","sectionData","forEach","match","key","console","log","extract","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginTop","display","flexDirection","alignItems","variant","align","fontFamily","fontWeight","color","marginBottom","Object","entries","map","title","content","index","backgroundColor","boxShadow","borderRadius","padding","textAlign","sx","fontSize","lineHeight","_c","$RefreshReg$"],"sources":["C:/Users/Vanshika Kothari/Plant-disease/plant-disease/src/pages/Info.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Container, Typography ,Box,Card,CardContent} from \"@material-ui/core\";\r\n\r\nconst Info = () => {\r\n  const [diseaseInfo, setDiseaseInfo] = useState(null);\r\n  const { prediction } = useParams();\r\n \r\n  const extractSections = (text) => {\r\n    let cleanText = text.replace(/\\*\\s*/g, \"\").trim();\r\n    const regex = /(What it is:|Causes:|Symptoms:|Effects:|Treatment Plan:|Prevention Methods:)[\\s\\S]*?(?=(What it is:|Causes:|Symptoms:|Effects:|Treatment Plan:|Prevention Methods:|$))/g;\r\n    const matches = [...cleanText.matchAll(regex)];\r\n    //console.log(\"Matches Found:\", matches);\r\n    const sectionData = {};\r\n    matches.forEach((match) => {\r\n      const key = match[1].replace(\":\", \"\").trim();\r\n      sectionData[key] = match[0].replace(match[1], \"\").trim();\r\n    });\r\n    console.log(\"Extracted Sections:\", sectionData); \r\n    return sectionData;\r\n  };\r\n  useEffect(() => {\r\n    const text = `*What it is:* A fast-spreading and highly destructive disease affecting tomato (and potato) plants.\r\n*Causes:* Caused by the water mold Phytophthora infestans. It thrives in cool, wet, and humid weather. Spores spread by wind and rain splash.\r\n*Symptoms:*\r\n  * *Leaves:* Dark, water-soaked spots, often appearing greasy, sometimes with white fuzzy mold on the underside in humid conditions.\r\n  * *Stems:* Dark, elongated lesions.\r\n  * *Fruit:* Greasy-looking, firm, brown blotches that can rapidly enlarge and rot.\r\n*Effects on the plant:* Rapidly kills leaves, stems, and fruit. Can quickly destroy entire plants and spread through a crop, leading to total loss. Makes fruit inedible.\r\n*Treatment Plan:*\r\n  * Difficult once established. Act immediately.\r\n  * Remove and destroy (do not compost) infected plant parts or whole plants if severely affected.\r\n  * Apply fungicides (copper-based or specific synthetic fungicides labelled for late blight) preventatively or at the very first sign, following label instructions. Repeat applications are usually necessary.\r\n*Prevention Methods:*\r\n  * Plant disease-resistant varieties.\r\n  * Ensure good air circulation (space plants well, prune lower leaves).\r\n  * Water at the base of plants (avoid overhead watering).\r\n  * Mulch around plants.\r\n  * Rotate crops (avoid planting tomatoes/potatoes in the same spot for 3-4 years).\r\n  * Monitor weather; be vigilant during cool, wet periods.\r\n  * Inspect plants frequently, especially after wet weather.\r\n  * Control volunteer tomato/potato plants and related weeds.\r\n  * Remove and destroy all plant debris at the end of the season.\r\n`\r\n   \r\n    //if (!prediction) return;  // Prevents fetching if prediction is undefined\r\n    const extract=extractSections(text)\r\n    setDiseaseInfo(extract)\r\n    // fetch(`http://127.0.0.1:5000/diseaseinfo?prediction=${prediction}`)\r\n    //   .then(response => {\r\n    //     if (!response.ok) {\r\n    //       throw new Error(\"Failed to fetch disease details\");\r\n    //     }\r\n    //     return response.json();\r\n    //   })\r\n    //   .then(data => {\r\n    //     const extracted=extractSections(data.info)\r\n    //     setDiseaseInfo(extracted);\r\n    //   })\r\n    //   .catch(error => {\r\n    //     console.error(\"Error fetching disease details:\", error);\r\n    //   });\r\n  }, []); \r\n\r\n  if (!diseaseInfo) {\r\n    return <Typography>Loading...</Typography>;\r\n  }\r\n\r\n  return (\r\n   <Box style={{marginTop:\"4px\",display: \"flex\", flexDirection: \"column\", alignItems: \"flex-start\" }}>\r\n    <Typography variant=\"h4\" align=\"center\" style={{fontFamily:\"'Poppins', sans-serif\",fontWeight:'bold',color:\"#2E7D32\" ,marginBottom:\"30px\"}}>🌱 Plant Disease Information</Typography>\r\n    {Object.entries(diseaseInfo).map(([title,content],index)=>(\r\n    <Card\r\n    key={index}\r\n    style={{\r\n      backgroundColor: \"#E8F5E9\", // Light green background\r\n      boxShadow: \"0px 4px 12px rgba(0, 100, 0, 0.2)\", // Greenish shadow effect\r\n      borderRadius: 3, // Rounded corners\r\n      marginBottom: 3, // Spacing between cards\r\n    }}\r\n  >\r\n    <CardContent style={{ padding: 3, textAlign: \"left\" }}>\r\n      <Typography variant=\"h6\" sx={{ fontWeight: \"bold\", fontFamily: \"'Poppins', sans-serif\", color: \"#1B5E20\" }}>\r\n        {title}\r\n      </Typography>\r\n      <Typography variant=\"body1\" sx={{ fontSize: \"15px\", fontFamily: \"'Poppins', sans-serif\", lineHeight: 1.6 }}>\r\n        {content}\r\n      </Typography>\r\n    </CardContent>\r\n  </Card>\r\n    ))};\r\n   </Box>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}